version: 0.2
phases:
  install:
    commands:
       - yum install -y jq
      #- yum install -y unzip
      #- wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
      #- unzip sonar-scanner-cli-4.8.0.2856-linux.zip
      #- mv sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner
      - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.10/2023-01-30/bin/linux/amd64/kubectl
      - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.10/2023-01-30/bin/linux/arm64/kubectl
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 954503069243.dkr.ecr.ap-south-1.amazonaws.com
      # - REPOSITORY_URI=954503069243.dkr.ecr.ap-south-1.amazonaws.com/om-test
      - aws secretsmanager get-secret-value --secret-id sonar --query 'SecretString' --output text > sonar.json
      - echo "$(jq -r '.SONAR_URL' secrets.json)"
      - echo "$(jq -r '.SONAR_TOKEN' secrets.json)"
      - export KUBECONFIG=$HOME/.kube/config
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      #- /opt/sonar-scanner/bin/sonar-scanner  -Dsonar.projectKey= -Dsonar.sources=. -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_TOKEN}
      #- cd ServicesNGAPI
      - pwd
      - docker build -t dotnet -f dotnet/Dockerfile .
      - docker tag dotnet:latest ${ECR_REPO}:latest
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push ${ECR_REPO}:latest
#       - echo Writing image definitions file...
#       - echo "$Repository_Name-$Branch_Name"
#       - printf '[{"name":"sample-container","imageUri"465105616690.dkr.ecr.ap-south-1.amazonaws.com/servicengapi:":$CODEBUILD_BUILD_NUMBER"}]' > imagedefinitions.json
#       - CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::465105616690:role/eks-cluster-role --role-session-name codebuild-kubectl --duration-seconds 900)
#       - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
#       - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
#       - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
#       - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
#       - aws eks update-kubeconfig --name Staging_cluster
#       - kubectl apply -f deployment.yml 
